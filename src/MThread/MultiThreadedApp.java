package MThread;

import javazoom.jl.decoder.JavaLayerException;
import javax.swing.*;
import java.awt.*;
import java.io.File;
import java.io.FileInputStream;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.TimeZone;
import javazoom.jl.player.Player;


/**
 *
 * @author binta
 */
public class MultiThreadedApp extends javax.swing.JFrame {
     private JLabel timeLabel;
    private JComboBox<String> timezoneSelector;
    private JButton playButton, stopButton, setAlarmButton, chooseFileButton;
    private JTextField alarmField;
    private volatile boolean alarmSet = false;
    private String alarmTime = "";
    private volatile Player mp3Player;
    private Thread musicThread;
    private String selectedMp3File = null; 
    
    public MultiThreadedApp() {
        setTitle("MP3 Music, World Clock & Alarm");
        setSize(400, 300);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setResizable(false); 
        setLayout(new FlowLayout());
        setLocationRelativeTo(null); 

        // Label Jam
        timeLabel = new JLabel("Time: ");
        add(timeLabel);

        // Pilihan Zona Waktu
        String[] timezones = {"UTC", "Asia/Jakarta", "America/New_York", "Europe/London"};
        timezoneSelector = new JComboBox<>(timezones);
        add(timezoneSelector);

        // Tombol Pemutar Musik
        chooseFileButton = new JButton("Choose MP3 File");
        playButton = new JButton("Play MP3");
        stopButton = new JButton("Stop MP3");
        add(chooseFileButton);
        add(playButton);
        add(stopButton);

        // Alarm
        alarmField = new JTextField(5);
        setAlarmButton = new JButton("Set Alarm (HH:mm)");
        add(alarmField);
        add(setAlarmButton);

        // Listener untuk Memilih File MP3
        chooseFileButton.addActionListener(e -> selectMp3File());

        // Listener untuk Play & Stop Musik
        playButton.addActionListener(e -> {
            if (selectedMp3File != null) {
                playMusic(selectedMp3File);
            } else {
                JOptionPane.showMessageDialog(this, "Pilih file MP3 terlebih dahulu!", "Error", JOptionPane.ERROR_MESSAGE);
            }
        });

        stopButton.addActionListener(e -> stopMusic());

        // Listener untuk Set Alarm
        setAlarmButton.addActionListener(e -> {
            alarmTime = alarmField.getText();
            alarmSet = true;
            JOptionPane.showMessageDialog(this, "Alarm set for: " + alarmTime);
        });

        // Thread untuk update jam dunia
        new Thread(this::updateTime).start();

        // Thread untuk alarm
        new Thread(this::checkAlarm).start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MultiThreadedApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MultiThreadedApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MultiThreadedApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MultiThreadedApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MultiThreadedApp().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    private void selectMp3File() {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Pilih file MP3");
        fileChooser.setFileFilter(new javax.swing.filechooser.FileNameExtensionFilter("MP3 Files", "mp3"));
        
        int result = fileChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            if (file.getName().toLowerCase().endsWith(".mp3")) {
                selectedMp3File = file.getAbsolutePath();
                JOptionPane.showMessageDialog(this, "File MP3 dipilih: " + selectedMp3File);
            } else {
                JOptionPane.showMessageDialog(this, "Harap pilih file MP3!", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private void updateTime() {
        while (true) {
            String selectedZone = (String) timezoneSelector.getSelectedItem();
            SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss");
            sdf.setTimeZone(TimeZone.getTimeZone(selectedZone));
            timeLabel.setText("Time: " + sdf.format(new Date()));
            try {
                Thread.sleep(1000); 
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }

    private void checkAlarm() {
        while (true) {
            if (alarmSet) {
                SimpleDateFormat sdf = new SimpleDateFormat("HH:mm");
                String currentTime = sdf.format(new Date());

                if (currentTime.equals(alarmTime)) {
                    JOptionPane.showMessageDialog(this, "ALARM! Time to Wake Up!");
                    alarmSet = false; 
                }
            }
            try {
                Thread.sleep(5000); 
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }

    private void playMusic(String filePath) {
        stopMusic(); 
        musicThread = new Thread(() -> {
            try {
                FileInputStream fileInputStream = new FileInputStream(filePath);
                mp3Player = new Player(fileInputStream);
                mp3Player.play();
            } catch (Exception e) {
                e.printStackTrace();
            }
        });
        musicThread.start();
    }

    private void stopMusic() {
        if (mp3Player != null) {
            mp3Player.close();
        }
    }
}
